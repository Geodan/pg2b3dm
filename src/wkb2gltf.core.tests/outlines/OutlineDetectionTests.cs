using System;
using System.Collections.Generic;
using System.Numerics;
using NUnit.Framework;
using SharpGLTF.Geometry.VertexTypes;
using SharpGLTF.Geometry;
using SharpGLTF.Materials;
using SharpGLTF.Scenes;
using Wkb2Gltf.extensions;
using Wkb2Gltf.outlines;
using Wkx;
using Wkb2Gltf.Extensions;

namespace Wkb2Gltf.Tests.outlines;
public class OutlineDetectionTests
{
    static bool DrawTriangle(Triangle triangle, MaterialBuilder material, MeshBuilder<VertexPositionNormal, VertexWithBatchId, VertexEmpty> mesh)
    {
        var normal = triangle.GetNormal();
        var prim = mesh.UsePrimitive(material);
        var vectors = triangle.ToVectors();
        var indices = prim.AddTriangleWithBatchId(vectors, normal, 0);
        return indices.Item1 > 0;
    }

    [Test]
    public void OutlineDetectionTest()
    {
        // arrange
        var t0 = new Triangle(new Point(0, 0, 0), new Point(0, 1, 0), new Point(1, 0, 0), 0);
        var t1 = new Triangle(new Point(1, 0, 0), new Point(0, 1, 0), new Point(1, 1, 0), 1);
        var t2 = new Triangle(new Point(10, 0, 0), new Point(10, 1, 0), new Point(11, 1, 0), 2);

        // put them in wrong order
        var triangles = new List<Triangle> { t0, t2, t1 };

        var parts = PartFinder.GetParts(triangles);

        Assert.That(parts.Count == 1, Is.True);
        Assert.That(parts[0].Count == 3, Is.True);
        Assert.That(parts[0][0] == 0, Is.True);
        Assert.That(parts[0][1] == 1, Is.True);
        Assert.That(parts[0][0] == 0, Is.True);

        var outlines = OutlineDetection.GetOutlines2(triangles);
        Assert.That(outlines.Count == 8, Is.True);
    }

    [Test]
    public void Test5415()
    {
        var wkt = "POLYHEDRALSURFACE Z (((1241911.54902145 -4797217.68794191 4002129.80061267,1241918.89248214 -4797221.19512978 4002123.36128067,1241903.14171574 -4797224.93080186 4002123.76836904,1241911.54902145 -4797217.68794191 4002129.80061267)),((1241905.58223567 -4797232.68949606 4002113.7782439,1241910.55433709 -4797228.46255695 4002117.27846764,1241909.57001823 -4797234.5929178 4002110.28275577,1241905.58223567 -4797232.68949606 4002113.7782439)),((1241926.11534648 -4797219.8875908 4002122.69172965,1241909.57001823 -4797234.5929178 4002110.28275577,1241922.43981354 -4797218.13296293 4002125.9138087,1241926.11534648 -4797219.8875908 4002122.69172965)),((1241903.14171574 -4797224.93080186 4002123.76836904,1241918.89248214 -4797221.19512978 4002123.36128067,1241910.55433709 -4797228.46255695 4002117.27846764,1241903.14171574 -4797224.93080186 4002123.76836904)),((1241909.57001823 -4797234.5929178 4002110.28275577,1241910.55433709 -4797228.46255695 4002117.27846764,1241922.43981354 -4797218.13296293 4002125.9138087,1241909.57001823 -4797234.5929178 4002110.28275577)),((1241922.43981354 -4797218.13296293 4002125.9138087,1241918.89248214 -4797221.19512978 4002123.36128067,1241910.55433709 -4797228.46255695 4002117.27846764,1241922.43981354 -4797218.13296293 4002125.9138087)),((1241913.96414361 -4797227.01700145 4002137.63593226,1241921.3076186 -4797230.52419617 4002131.19658769,1241905.55682157 -4797234.25987552 4002131.60367685,1241913.96414361 -4797227.01700145 4002137.63593226)),((1241907.99734626 -4797242.01858487 4002121.61353221,1241912.96945734 -4797237.79163751 4002125.11376279,1241911.98513658 -4797243.92201033 4002118.11803725,1241907.99734626 -4797242.01858487 4002121.61353221)),((1241928.53049699 -4797229.21665466 4002130.52703536,1241911.98513658 -4797243.92201033 4002118.11803725,1241924.85495689 -4797227.46202335 4002133.7491207,1241928.53049699 -4797229.21665466 4002130.52703536)),((1241905.55682157 -4797234.25987552 4002131.60367685,1241921.3076186 -4797230.52419617 4002131.19658769,1241912.96945734 -4797237.79163751 4002125.11376279,1241905.55682157 -4797234.25987552 4002131.60367685)),((1241911.98513658 -4797243.92201033 4002118.11803725,1241912.96945734 -4797237.79163751 4002125.11376279,1241924.85495689 -4797227.46202335 4002133.7491207,1241911.98513658 -4797243.92201033 4002118.11803725)),((1241924.85495689 -4797227.46202335 4002133.7491207,1241921.3076186 -4797230.52419617 4002131.19658769,1241912.96945734 -4797237.79163751 4002125.11376279,1241924.85495689 -4797227.46202335 4002133.7491207)),((1241918.89248214 -4797221.19512978 4002123.36128067,1241921.3076186 -4797230.52419617 4002131.19658769,1241922.43981354 -4797218.13296293 4002125.9138087,1241918.89248214 -4797221.19512978 4002123.36128067)),((1241924.85495689 -4797227.46202335 4002133.7491207,1241922.43981354 -4797218.13296293 4002125.9138087,1241921.3076186 -4797230.52419617 4002131.19658769,1241924.85495689 -4797227.46202335 4002133.7491207)),((1241922.43981354 -4797218.13296293 4002125.9138087,1241924.85495689 -4797227.46202335 4002133.7491207,1241926.11534648 -4797219.8875908 4002122.69172965,1241922.43981354 -4797218.13296293 4002125.9138087)),((1241928.53049699 -4797229.21665466 4002130.52703536,1241926.11534648 -4797219.8875908 4002122.69172965,1241924.85495689 -4797227.46202335 4002133.7491207,1241928.53049699 -4797229.21665466 4002130.52703536)),((1241911.98513658 -4797243.92201033 4002118.11803725,1241909.57001823 -4797234.5929178 4002110.28275577,1241926.11534648 -4797219.8875908 4002122.69172965,1241911.98513658 -4797243.92201033 4002118.11803725)),((1241926.11534648 -4797219.8875908 4002122.69172965,1241928.53049699 -4797229.21665466 4002130.52703536,1241911.98513658 -4797243.92201033 4002118.11803725,1241926.11534648 -4797219.8875908 4002122.69172965)),((1241909.57001823 -4797234.5929178 4002110.28275577,1241911.98513658 -4797243.92201033 4002118.11803725,1241905.58223567 -4797232.68949606 4002113.7782439,1241909.57001823 -4797234.5929178 4002110.28275577)),((1241907.99734626 -4797242.01858487 4002121.61353221,1241905.58223567 -4797232.68949606 4002113.7782439,1241911.98513658 -4797243.92201033 4002118.11803725,1241907.99734626 -4797242.01858487 4002121.61353221)),((1241905.58223567 -4797232.68949606 4002113.7782439,1241907.99734626 -4797242.01858487 4002121.61353221,1241910.55433709 -4797228.46255695 4002117.27846764,1241905.58223567 -4797232.68949606 4002113.7782439)),((1241912.96945734 -4797237.79163751 4002125.11376279,1241910.55433709 -4797228.46255695 4002117.27846764,1241907.99734626 -4797242.01858487 4002121.61353221,1241912.96945734 -4797237.79163751 4002125.11376279)),((1241905.55682157 -4797234.25987552 4002131.60367685,1241903.14171574 -4797224.93080186 4002123.76836904,1241910.55433709 -4797228.46255695 4002117.27846764,1241905.55682157 -4797234.25987552 4002131.60367685)),((1241910.55433709 -4797228.46255695 4002117.27846764,1241912.96945734 -4797237.79163751 4002125.11376279,1241905.55682157 -4797234.25987552 4002131.60367685,1241910.55433709 -4797228.46255695 4002117.27846764)),((1241903.14171574 -4797224.93080186 4002123.76836904,1241905.55682157 -4797234.25987552 4002131.60367685,1241911.54902145 -4797217.68794191 4002129.80061267,1241903.14171574 -4797224.93080186 4002123.76836904)),((1241913.96414361 -4797227.01700145 4002137.63593226,1241911.54902145 -4797217.68794191 4002129.80061267,1241905.55682157 -4797234.25987552 4002131.60367685,1241913.96414361 -4797227.01700145 4002137.63593226)),((1241921.3076186 -4797230.52419617 4002131.19658769,1241918.89248214 -4797221.19512978 4002123.36128067,1241911.54902145 -4797217.68794191 4002129.80061267,1241921.3076186 -4797230.52419617 4002131.19658769)),((1241911.54902145 -4797217.68794191 4002129.80061267,1241913.96414361 -4797227.01700145 4002137.63593226,1241921.3076186 -4797230.52419617 4002131.19658769,1241911.54902145 -4797217.68794191 4002129.80061267)))";
        var g = Geometry.Deserialize<WktSerializer>(wkt);

        var surface = (PolyhedralSurface)g;

        var triangles = GeometryProcessor.GetTriangles(surface, 0, new double[] { 0, 0, 0 }, new double[] { 1, 1, 1 });

        var normals = new List<Vector3>();
        var length = new List<double>();
        foreach (var triangle in triangles) {
            normals.Add(triangle.GetNormal().Normalize());
            length.Add(triangle.GetNormal().Normalize().Length());
        }

        var material = new MaterialBuilder().
WithDoubleSide(true).
WithMetallicRoughnessShader().
WithChannelParam(KnownChannel.BaseColor, KnownProperty.RGBA, new Vector4(1, 1, 1, 1));

        var mesh = new MeshBuilder<VertexPositionNormal, VertexWithBatchId, VertexEmpty>("mesh");

        foreach (var triangle in triangles) {
            DrawTriangle(triangle, material, mesh);
        }

        var scene = new SceneBuilder();

        scene.AddRigidMesh(mesh, Matrix4x4.Identity);
        var model = scene.ToGltf2();

        // act
        var outlines = OutlineDetection.GetOutlines(model.LogicalMeshes[0].Primitives[0]);

        // assert
        Assert.That(outlines.Count > 0, Is.True);
    }

    [Test]
    public void PolyAreaWithDuplicateIndicesTest()
    {
        // arrange
        // ogc_fid = 15544
        var wkt = "POLYHEDRALSURFACE Z (((1238016.74734818 -4799154.34602958 4001021.94854933,1238011.42191493 -4799160.05874017 4001016.77890773,1238004.78526014 -4799150.58113141 4001030.11081053,1238016.74734818 -4799154.34602958 4001021.94854933)),((1237999.45974153 -4799156.29385832 4001024.94117579,1238004.78526014 -4799150.58113141 4001030.11081053,1238011.42191493 -4799160.05874017 4001016.77890773,1237999.45974153 -4799156.29385832 4001024.94117579)),((1238018.83311596 -4799162.43147876 4001028.73476214,1238013.50767374 -4799168.144199 4001023.5651118,1238006.87100775 -4799158.6665742 4001036.89703715,1238018.83311596 -4799162.43147876 4001028.73476214)),((1238001.54548018 -4799164.37931076 4001031.72739367,1238006.87100775 -4799158.6665742 4001036.89703715,1238013.50767374 -4799168.144199 4001023.5651118,1238001.54548018 -4799164.37931076 4001031.72739367)),((1238013.50767374 -4799168.144199 4001023.5651118,1238011.42191493 -4799160.05874017 4001016.77890773,1238016.74734818 -4799154.34602958 4001021.94854933,1238013.50767374 -4799168.144199 4001023.5651118)),((1238016.74734818 -4799154.34602958 4001021.94854933,1238018.83311596 -4799162.43147876 4001028.73476214,1238013.50767374 -4799168.144199 4001023.5651118,1238016.74734818 -4799154.34602958 4001021.94854933)),((1238001.54548018 -4799164.37931076 4001031.72739367,1237999.45974153 -4799156.29385832 4001024.94117579,1238011.42191493 -4799160.05874017 4001016.77890773,1238001.54548018 -4799164.37931076 4001031.72739367)),((1238011.42191493 -4799160.05874017 4001016.77890773,1238013.50767374 -4799168.144199 4001023.5651118,1238001.54548018 -4799164.37931076 4001031.72739367,1238011.42191493 -4799160.05874017 4001016.77890773)),((1237999.45974153 -4799156.29385832 4001024.94117579,1238001.54548018 -4799164.37931076 4001031.72739367,1238004.78526014 -4799150.58113141 4001030.11081053,1237999.45974153 -4799156.29385832 4001024.94117579)),((1238006.87100775 -4799158.6665742 4001036.89703715,1238004.78526014 -4799150.58113141 4001030.11081053,1238001.54548018 -4799164.37931076 4001031.72739367,1238006.87100775 -4799158.6665742 4001036.89703715)),((1238004.78526014 -4799150.58113141 4001030.11081053,1238006.87100775 -4799158.6665742 4001036.89703715,1238016.74734818 -4799154.34602958 4001021.94854933,1238004.78526014 -4799150.58113141 4001030.11081053)),((1238018.83311596 -4799162.43147876 4001028.73476214,1238016.74734818 -4799154.34602958 4001021.94854933,1238006.87100775 -4799158.6665742 4001036.89703715,1238018.83311596 -4799162.43147876 4001028.73476214)))";
        var g = Geometry.Deserialize<WktSerializer>(wkt);

        var surface = (PolyhedralSurface)g;
        var triangles = GeometryProcessor.GetTriangles(surface, 0, new double[] { 0, 0, 0 }, new double[] { 1, 1, 1 });
        Assert.That(triangles.Count == 12, Is.True);

        var material = new MaterialBuilder().
            WithDoubleSide(true).
            WithMetallicRoughnessShader().
            WithChannelParam(KnownChannel.BaseColor, KnownProperty.RGBA, new Vector4(1, 1, 1, 1));

        var mesh = new MeshBuilder<VertexPositionNormal, VertexWithBatchId, VertexEmpty>("mesh");

        foreach (var triangle in triangles) {
            DrawTriangle(triangle, material, mesh);
        }

        var scene = new SceneBuilder();

        scene.AddRigidMesh(mesh, Matrix4x4.Identity);
        var model = scene.ToGltf2();

        // act
        var outlines = OutlineDetection.GetOutlines(model.LogicalMeshes[0].Primitives[0]);

        // assert
        Assert.That(outlines.Count > 0, Is.True);
    }

    [Test]
    public void Polygon5812Test()
    {
        // arrange
        var wkt = "POLYHEDRALSURFACE Z (((-1085.6930126023944 -3333.6535406727344 -4819.485265350901,-1078.8289817469195 -3333.5242771124467 -4821.439057455398,-1087.7491943775676 -3342.2058568587527 -4829.042992391158,-1085.6930126023944 -3333.6535406727344 -4819.485265350901)),((-1081.9425674220547 -3342.0964868245646 -4830.695779501926,-1087.7491943775676 -3342.2058568587527 -4829.042992391158,-1078.8289817469195 -3333.5242771124467 -4821.439057455398,-1081.9425674220547 -3342.0964868245646 -4830.695779501926)),((-1083.0550515097566 -3343.888195139356 -4810.894723505247,-1076.1910060127266 -3343.7589313173667 -4812.84851979278,-1085.1112376530655 -3352.440529628657 -4820.452471010387,-1083.0550515097566 -3343.888195139356 -4810.894723505247)),((-1079.3045983116608 -3352.3311593737453 -4822.105261660181,-1085.1112376530655 -3352.440529628657 -4820.452471010387,-1076.1910060127266 -3343.7589313173667 -4812.84851979278,-1079.3045983116608 -3352.3311593737453 -4822.105261660181)),((-1085.6930126023944 -3333.6535406727344 -4819.485265350901,-1083.0550515097566 -3343.888195139356 -4810.894723505247,-1078.8289817469195 -3333.5242771124467 -4821.439057455398,-1085.6930126023944 -3333.6535406727344 -4819.485265350901)),((-1076.1910060127266 -3343.7589313173667 -4812.84851979278,-1078.8289817469195 -3333.5242771124467 -4821.439057455398,-1083.0550515097566 -3343.888195139356 -4810.894723505247,-1076.1910060127266 -3343.7589313173667 -4812.84851979278)),((-1079.3045983116608 -3352.3311593737453 -4822.105261660181,-1081.9425674220547 -3342.0964868245646 -4830.695779501926,-1078.8289817469195 -3333.5242771124467 -4821.439057455398,-1079.3045983116608 -3352.3311593737453 -4822.105261660181)),((-1078.8289817469195 -3333.5242771124467 -4821.439057455398,-1076.1910060127266 -3343.7589313173667 -4812.84851979278,-1079.3045983116608 -3352.3311593737453 -4822.105261660181,-1078.8289817469195 -3333.5242771124467 -4821.439057455398)),((-1085.1112376530655 -3352.440529628657 -4820.452471010387,-1087.7491943775676 -3342.2058568587527 -4829.042992391158,-1081.9425674220547 -3342.0964868245646 -4830.695779501926,-1085.1112376530655 -3352.440529628657 -4820.452471010387)),((-1081.9425674220547 -3342.0964868245646 -4830.695779501926,-1079.3045983116608 -3352.3311593737453 -4822.105261660181,-1085.1112376530655 -3352.440529628657 -4820.452471010387,-1081.9425674220547 -3342.0964868245646 -4830.695779501926)),((-1087.7491943775676 -3342.2058568587527 -4829.042992391158,-1085.1112376530655 -3352.440529628657 -4820.452471010387,-1085.6930126023944 -3333.6535406727344 -4819.485265350901,-1087.7491943775676 -3342.2058568587527 -4829.042992391158)),((-1083.0550515097566 -3343.888195139356 -4810.894723505247,-1085.6930126023944 -3333.6535406727344 -4819.485265350901,-1085.1112376530655 -3352.440529628657 -4820.452471010387,-1083.0550515097566 -3343.888195139356 -4810.894723505247)))";
        var g = (PolyhedralSurface)Geometry.Deserialize<WktSerializer>(wkt);
        var triangles = GeometryProcessor.GetTriangles(g, 0, new double[] { 0, 0, 0 }, new double[] { 1, 1, 1 });

        // act
        var res = OutlineDetection.GetOutlines2(triangles);

        // assert
        Assert.That(res.Count == 48, Is.True);
    }

    [Test]
    public void MultiPolygonZTest()
    {
        // arrange
        var wkt = "MULTIPOLYGON Z (((-1078.8289817469195 -3333.5242771124467 -4821.439057455398,-1073.1848455679137 -3333.418020649813 -4823.045666193124,-1081.9425674220547 -3342.0964868245646 -4830.695779501926,-1078.8289817469195 -3333.5242771124467 -4821.439057455398)),((-1075.7065515371505 -3341.979115477763 -4832.470900063869,-1081.9425674220547 -3342.0964868245646 -4830.695779501926,-1073.1848455679137 -3333.418020649813 -4823.045666193124,-1075.7065515371505 -3341.979115477763 -4832.470900063869)),((-1076.2219954489265 -3343.6387004302815 -4812.949436534662,-1070.5778473715764 -3343.5324437553063 -4814.556048672646,-1079.3355876698624 -3352.2109282715246 -4822.206178169232,-1076.2219954489265 -3343.6387004302815 -4812.949436534662)),((-1073.0995586388744 -3352.09355669003 -4823.981302487664,-1079.3355876698624 -3352.2109282715246 -4822.206178169232,-1070.5778473715764 -3343.5324437553063 -4814.556048672646,-1073.0995586388744 -3352.09355669003 -4823.981302487664)),((-1078.8289817469195 -3333.5242771124467 -4821.439057455398,-1076.2219954489265 -3343.6387004302815 -4812.949436534662,-1073.1848455679137 -3333.418020649813 -4823.045666193124,-1078.8289817469195 -3333.5242771124467 -4821.439057455398)),((-1070.5778473715764 -3343.5324437553063 -4814.556048672646,-1073.1848455679137 -3333.418020649813 -4823.045666193124,-1076.2219954489265 -3343.6387004302815 -4812.949436534662,-1070.5778473715764 -3343.5324437553063 -4814.556048672646)),((-1073.0995586388744 -3352.09355669003 -4823.981302487664,-1075.7065515371505 -3341.979115477763 -4832.470900063869,-1073.1848455679137 -3333.418020649813 -4823.045666193124,-1073.0995586388744 -3352.09355669003 -4823.981302487664)),((-1073.1848455679137 -3333.418020649813 -4823.045666193124,-1070.5778473715764 -3343.5324437553063 -4814.556048672646,-1073.0995586388744 -3352.09355669003 -4823.981302487664,-1073.1848455679137 -3333.418020649813 -4823.045666193124)),((-1079.3355876698624 -3352.2109282715246 -4822.206178169232,-1081.9425674220547 -3342.0964868245646 -4830.695779501926,-1075.7065515371505 -3341.979115477763 -4832.470900063869,-1079.3355876698624 -3352.2109282715246 -4822.206178169232)),((-1075.7065515371505 -3341.979115477763 -4832.470900063869,-1073.0995586388744 -3352.09355669003 -4823.981302487664,-1079.3355876698624 -3352.2109282715246 -4822.206178169232,-1075.7065515371505 -3341.979115477763 -4832.470900063869)),((-1081.9425674220547 -3342.0964868245646 -4830.695779501926,-1079.3355876698624 -3352.2109282715246 -4822.206178169232,-1078.8289817469195 -3333.5242771124467 -4821.439057455398,-1081.9425674220547 -3342.0964868245646 -4830.695779501926)),((-1076.2219954489265 -3343.6387004302815 -4812.949436534662,-1078.8289817469195 -3333.5242771124467 -4821.439057455398,-1079.3355876698624 -3352.2109282715246 -4822.206178169232,-1076.2219954489265 -3343.6387004302815 -4812.949436534662)))";
        var g = (MultiPolygon)Geometry.Deserialize<WktSerializer>(wkt);
        var triangles = GeometryProcessor.GetTriangles(g, 0, new double[] { 0, 0, 0 }, new double[] { 1, 1, 1 });

        // act
        var res = OutlineDetection.GetOutlines2(triangles);

        // assert
        Assert.That(res.Count == 48, Is.True);
    }


    [Test]
    public void Polygon5811Test()
    {
        // arrange
        var wkt = "POLYHEDRALSURFACE Z (((-1078.8289817469195 -3333.5242771124467 -4821.439057455398,-1073.1848455679137 -3333.418020649813 -4823.045666193124,-1081.9425674220547 -3342.0964868245646 -4830.695779501926,-1078.8289817469195 -3333.5242771124467 -4821.439057455398)),((-1075.7065515371505 -3341.979115477763 -4832.470900063869,-1081.9425674220547 -3342.0964868245646 -4830.695779501926,-1073.1848455679137 -3333.418020649813 -4823.045666193124,-1075.7065515371505 -3341.979115477763 -4832.470900063869)),((-1076.2219954489265 -3343.6387004302815 -4812.949436534662,-1070.5778473715764 -3343.5324437553063 -4814.556048672646,-1079.3355876698624 -3352.2109282715246 -4822.206178169232,-1076.2219954489265 -3343.6387004302815 -4812.949436534662)),((-1073.0995586388744 -3352.09355669003 -4823.981302487664,-1079.3355876698624 -3352.2109282715246 -4822.206178169232,-1070.5778473715764 -3343.5324437553063 -4814.556048672646,-1073.0995586388744 -3352.09355669003 -4823.981302487664)),((-1078.8289817469195 -3333.5242771124467 -4821.439057455398,-1076.2219954489265 -3343.6387004302815 -4812.949436534662,-1073.1848455679137 -3333.418020649813 -4823.045666193124,-1078.8289817469195 -3333.5242771124467 -4821.439057455398)),((-1070.5778473715764 -3343.5324437553063 -4814.556048672646,-1073.1848455679137 -3333.418020649813 -4823.045666193124,-1076.2219954489265 -3343.6387004302815 -4812.949436534662,-1070.5778473715764 -3343.5324437553063 -4814.556048672646)),((-1073.0995586388744 -3352.09355669003 -4823.981302487664,-1075.7065515371505 -3341.979115477763 -4832.470900063869,-1073.1848455679137 -3333.418020649813 -4823.045666193124,-1073.0995586388744 -3352.09355669003 -4823.981302487664)),((-1073.1848455679137 -3333.418020649813 -4823.045666193124,-1070.5778473715764 -3343.5324437553063 -4814.556048672646,-1073.0995586388744 -3352.09355669003 -4823.981302487664,-1073.1848455679137 -3333.418020649813 -4823.045666193124)),((-1079.3355876698624 -3352.2109282715246 -4822.206178169232,-1081.9425674220547 -3342.0964868245646 -4830.695779501926,-1075.7065515371505 -3341.979115477763 -4832.470900063869,-1079.3355876698624 -3352.2109282715246 -4822.206178169232)),((-1075.7065515371505 -3341.979115477763 -4832.470900063869,-1073.0995586388744 -3352.09355669003 -4823.981302487664,-1079.3355876698624 -3352.2109282715246 -4822.206178169232,-1075.7065515371505 -3341.979115477763 -4832.470900063869)),((-1081.9425674220547 -3342.0964868245646 -4830.695779501926,-1079.3355876698624 -3352.2109282715246 -4822.206178169232,-1078.8289817469195 -3333.5242771124467 -4821.439057455398,-1081.9425674220547 -3342.0964868245646 -4830.695779501926)),((-1076.2219954489265 -3343.6387004302815 -4812.949436534662,-1078.8289817469195 -3333.5242771124467 -4821.439057455398,-1079.3355876698624 -3352.2109282715246 -4822.206178169232,-1076.2219954489265 -3343.6387004302815 -4812.949436534662)))";
        var g = (PolyhedralSurface)Geometry.Deserialize<WktSerializer>(wkt);
        var triangles = GeometryProcessor.GetTriangles(g, 0, new double[] { 0, 0, 0 }, new double[] { 1, 1, 1 });

        // act
        var res = OutlineDetection.GetOutlines2(triangles);

        // assert
        Assert.That(res.Count == 48, Is.True);
    }

    [Test]
    public void FindConnectedTrianglesWithSameNormal()
    {
        // arrange
        var t0 = new Triangle(new Point(0, 0, 0), new Point(0, 1, 0), new Point(1, 0, 0), 0);
        var t1 = new Triangle(new Point(1, 0, 0), new Point(1, 1, 0), new Point(2, 0, 0), 0);
        var t2 = new Triangle(new Point(1, 0, 0), new Point(0, 1, 0), new Point(1, 1, 0), 0);

        var triangles = new List<Triangle> { t0, t1, t2 };

        var a = Adjacency.GetAdjacencyList(triangles);
        Assert.That(a.ContainsKey(0), Is.True);
        Assert.That(a[0].Count == 1, Is.True);
        Assert.That(a[1].Count == 1, Is.True);
        Assert.That(a[2].Count == 2, Is.True);


        var outlines = Part.GetOutlines(triangles, new List<uint>() { 0, 1, 2 });
        Assert.That(outlines[0] == 0, Is.True);
        Assert.That(outlines[1] == 1, Is.True);
        Assert.That(outlines[2] == 2, Is.True);
        Assert.That(outlines[3] == 0, Is.True);
        Assert.That(outlines[4] == 4, Is.True);
        Assert.That(outlines[5] == 5, Is.True);
        Assert.That(outlines[6] == 5, Is.True);
        Assert.That(outlines[7] == 3, Is.True);
        Assert.That(outlines[8] == 7, Is.True);
        Assert.That(outlines[9] == 8, Is.True);
    }

}
